module Control_Unit(op_code,RegDst,jump,Branch,MemRead,MemtoReg,ALUop,MemWrite,ALUSrc,RegWrite);
	input [5:0] op_code;
	output reg RegDst,jump,Branch,MemRead,MemtoReg,MemWrite,ALUSrc,RegWrite;
	output reg [1:0] ALUop;
	always @ *
	begin
		case(op)
			//R type instruction
			6'd0:
			begin 

			end
			//I type lw save instruction
			6'd35:
			begin

			end
			//I type sw fetch instruction
			6'd43:
			begin

			end
			//I type beq instruction branch reverse instruction
			6'd4:
			begin

			end
			//J type instruction
			6'd2:
			begin

			end
			default:
			begin
				RegDst <= 0; jump <= 0; ALUop <= 0;
				Branch <= 0; MemtoReg <= 0; RegWrite <= 0;
				MemWrite <= 0; MemRead <= 0; ALUSrc <= 0;
			end
		endcase
	end
endmodule
